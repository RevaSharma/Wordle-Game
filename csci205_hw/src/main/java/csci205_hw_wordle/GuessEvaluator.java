/* *****************************************
 * CSCI205 -Software Engineering and Design
 * Fall2022
 * Instructor: Prof. Brian King
 *
 * Name: Reva Sharma, Kit Jackson
 * Section: 11am - 02
 * Date: 10/11/22
 * Time: 2:18 PM
 *
 * Project: csci205_hw
 * Package: csci205_hw_wordle
 * Class: GuessEvaluator
 *
 * Description:
 *
 * ****************************************
 */
package csci205_hw_wordle;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;

/**
 * Class that handles the job of analyzing a guess
 */
public class GuessEvaluator {
    /**
     * The word to be guessed
     */
    private String secretWord;
    /**
     * The current word guessed by the user
     */
    private String currentGuess;
    /**
     * Current guess analyzed by each letter
     */
    private String guessAnalysis;

    /**
     * Object of WordDictionary class
     */
    private WordDictionary wd;

    /**
     * Object of TextProcessor class
     */
    private TextProcessor tp;

    /**
     * GuessEvaluator constructor
     */
    public GuessEvaluator() throws MalformedURLException, URISyntaxException {
        this.secretWord=null;
        this.currentGuess=null;
        this.guessAnalysis=null;
        wd = new WordDictionary();
        tp = new TextProcessor();
    }


    public String getSecretWord() {
        return secretWord;
    }

    public String getGuessAnalysis() {
        return guessAnalysis;
    }

    /**
     * Sets the secret word to a random word generated by generateRandomWord() from Word Dictionary
     * @throws IOException
     */
    public void setSecretWord() throws IOException, URISyntaxException {
        //Check whether words.txt already exists or not
        File f = new File("/Users/revasharma/Desktop/CSCI 205/csci205_hw/src/main/java/csci205_hw_wordle/words.txt");
        //If words.txt not found, then generate the file
        if(!(f.isFile())) {
            System.out.println("words.txt: NOT FOUND! Generating a new set of words.");
            wd.generateNewWordSet();
            wd.setWordSet();
            this.secretWord = wd.getRandomWord();
        }
        //Else work with the existing file
        else{
            System.out.println("words.txt: FOUND! Starting the game.");
            this.secretWord = wd.getRandomWord();
        }
    }

    /**
     * Method that sets the secret word to a specific word (created for Junit testing)
     * @param secret specific word to set the secret word to
     */
    public void secretWordSet(String secret){
        this.secretWord = "betty";
    }

    /**
     * Compares the letters in the guess to the secret word and gives feedback on what letters were correct
     * @param guess string representing users word they are guessing
     */
    public void analyzeGuess(String guess)
    {
        this.currentGuess = guess;
        //Check whether guessed word is in wordSet
        if (wd.isWordinSet(this.currentGuess.toLowerCase()) == true) {
            String result = "";
            for (int i = 0; i < this.secretWord.length(); i++) {
                //If a letter is at the right place add "*" to result
                if (this.secretWord.toLowerCase().charAt(i) == this.currentGuess.toLowerCase().charAt(i)) {
                    result += "*";
                //If a letter exists in the word but in the wrong place add "+" to result
                } else if (this.secretWord.toLowerCase().contains(String.valueOf(this.currentGuess.toLowerCase().charAt(i)))) {
                    result += "+";
                //If a letter does not exist anywhere in the word add "-" to result
                } else {
                    result += "-";
                }
            }
            this.guessAnalysis = result;
        }
        //Guessed word is either not an actual word or is not in the set
        else{
            this.guessAnalysis = "Your guess is either not a valid word or does not exist in our word set. Please try again below:";
        }
    }


}
